#+TITLE: Аннотированный отчет за 2017
#+AUTHOR: Черкашин Евгений Александрович
#+LATEX_HEADER: \usepackage{unicode-math}
#+LATEX_HEADER: \setmainfont{XITS}
#+LATEX_HEADER: \setmathfont{XITS Math}
#+LATEX_HEADER: \setmathfont[range={\mathcal,\mathbfcal},StylisticSet=1]{XITS Math}

* A formula for lua
\begin{equation}
  \left( \frac{P^2}{2m} + V(x,y,z) \right) Ψ = E Ψ
\end{equation}

* Задачи, которые требовалось решить в 2017 году
** Отработка методов выделения суммарной ДНК из разных источников (вода, донные отложения) для секвенирования библиотек ампликонов фрагментов маркерных генов 16S (прокариоты) и 18S (эукариоты) рРНК и фрагментных метагеномных библиотек с целью получения информации о таксономической структуре эукариотических организмов в сообществах, соответствующей данным микроскопических методов анализа.
** Отбор проб из фотического слоя и донных осадков (до 100), выделение ДНК, секвенирование библиотек ампликонов 16S и 18S рРНК (общий объем секвенирования – 1-2 запуска Illumina MiSeq или аналогичный), таксономический анализ сообществ.
** Подготовка материалов для регистрации выделенных в культуру бактерий во Всероссийскую коллекцию микроорганизмов (ВКМ) (г. Пущино) и немецкую коллекцию микроорганизмов и клеточных культур, г. Лейбниц, Германия (DSMZ).
** Отработка алгоритмов биоинформатического анализа результатов секвенирования фрагментных метагеномных библиотек.
** Разработка онтологии и технологии унифицированного доступа к данным результатов исследований на основе Linked-Data и современных стандартов представления данных о биомах. Интеграция хранилища данных проекта в мировую информационную среду.

Исследования велись по следующим направлениям:

1. Поиск онтологий для представления публикуемых документов.
2. Разработка системы хранения и обеспечения публикуемых документов в частично формализованном виде.
3. Создание средств обеспечения доступа к документам, включая поиск по содержимому.
4. Разработка программной системы для построения логического вывода на данных документов.
5. Создание инфраструктуры для проведения анализа текстов хранимых документов с целью выявления новых данных разметки.

** Анализ современного программного обеспечения обработки BD, используемого в приложениях NGS, в том числе, удалении адаптеров и химер, проверке качества данных, таксономической идентификации, картировании прочтений, сборки de novo, анализе ампликонов, реконструкции метаболических путей и аннотации последовательностей. Выбор оптимального ПО для обработки данных
** Подготовка технических предложений по проектированию и реализации ИОБД, предназначенной для архивирования, управления, курирования, анализа и визуализации данных, получаемых в результате исследования микробиома биоинформационными технологиями и NGS.
** Проектирование схемы Хранилища Больших Данных (ХБД) для обеспечения управления данными, используемыми при исследовании микробиома Байкала, а также веб-публикации для поиска нуклеотидных и аминокислотных последовательностей по заданным таксонам и параметрам среды обитания.
** Для построения полисистемы динамических моделей выделение сквозных концептов, имеющих качественный характер, и базовых взаимосвязей между ними. Проведение серии пробных идентификаций параметров.

Проведены следующие исследования:

1. Произведен обзор литературы по тематике моделирования микробиомов в естественной среде.
2. Разработан метод идентификации динамической модели микробиома оз.Байкал на основе данных мониторинга.
3. Предложена методика вычисления начальных условий модели.

Разработан ряд технологий продержки процесса моделирования:

1. Программная подсистема визуализации и редактирования структуры модели, представляющая модели в виде ориентированного графа взаимодействия компонентов.
2. Подсистема расчетов, визуализации и сравнения сценариев использования модели.

*** Визуализация и редактирование структуры модели

Модель представляется в виде ориентированных иерархических графов влияния элементов (веществ и видов бактерий и водорослей) друг на друга (генные сети) и графов динамики.  Граф строится двумя способами: а) вручную, что удобно на этапах тестирования исследования предметной области и проведения экспериментов с готовыми моделями; б) в результате интеллектуального анализа дынных полевых исследований. Второй способ позволяет, в том числе, отображать данные полевых исследований в наглядном виде.

**** Графовое представление моделей микробиома оз. Байкал.

**** Программное обеспечение представления и обработки генных сетей и графов динамики

***** Архитектура системы

Система представления и обработки графов моделей состоит из следующих основных подсистем:
1. Хранилища графов;
2. Редактор графов;
3. Интеллектуальный анализ данных;
4. Визуализация структур данных и результатов модельных расчетов;
5. Импорт-экспорт данных и структуры графа в облачное хранилище.

Для реализации архитектуры использован ряд систем программирования:
1. Среда Python позволяет эффективно разрабатывать комплексные системы (склеивать компоненты) из различных гетерогенных подсистем;
2. Среда R для проведения первого этапа интеллектуального анализа данных, направленного на обобщение данных и поиск зависимостей между ними;
3. Среда SWI Prolog использована для формализации знаний второго из этапов интеллектуального анализа данных, а также реализации других подсистем, требующих использования логического вывода при помощи онтологий предметных областей;
4. Среда программная языка C/С++/С# использована для реализации вычислительных процедур;
5. Среда разработки интерфейсов пользователя GTK+, которая позволяет также интегрировать подсистемы приложения на уровне элементов управления пользовательского интерфейса.

***** Библиотеки Python для представления и обработки графов

Для Python реализовано несколько библиотек представления и обработки графов:
1. =[[http://igraph.org/2014/02/04/igraph-0.7-python.html][python-igraph 0.7.0]]=, особенность которой заключается в возможности обработки больших по объему графов (порядка миллиона узлов); в библиотеке реализовано множество алгоритмов анализа графов, эффективная поддержки на низком уровне (использован язык C), а также поддержка стандартных форматов записи графов в файл.
2. =[[https://networkx.github.io/][NetworkX]]= - библиотека, подобная =igraph=, предназначенная для изучения структур динамических сетей в биологии, социуме и технике, предоставляет стандартный интерфейс для разработки приложений, среду для быстрой скооперированной разработки в мультидисциплинарных проектах, базируется на эффективных алгоритмах, реализованных ранее в языках компилируемого типа - C, FORTRAN, а также позволят обрабатывать большие объемы данных;
3. =[[https://graph-tool.skewed.de/][graph-tool]]= - одна из самых обширных библиотек для представления, визуализации и обработки графов, поддерживающая многоядерные вычислительные архитектуры, фильтрацию данных, стандартные форматы данных, оценку статистических параметров графов, топологические алгоритмы, а также, в некоторой степени, возможности логического вывода на статических данных.

***** Библиотеки для редактирования графов

К перечню библиотек, использованных в данном обзоре требовалось взаимодействие с библиотекой GTK+.
1. =[[https://github.com/grindhold/libgtkflow][libgtkflow]]= предназначена для построения и редактирования графов потоков, аналогичных RapidMiner; библиотека поддерживает механизм ретроспекции, что позволяет редактор, реализованный в языке C, встраивать в приложения Python и Prolog;
2. =[[https://github.com/GNOME/graph-gtk][graph-gtk]]= - библиотека, аналогичная предыдущей, но с более гибкой настройкой узлов графа, не поддерживает ретроспекцию.
