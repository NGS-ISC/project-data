#+TITLE: Аннотированный отчет за 2017
#+AUTHOR: Черкашин Евгений Александрович
#+LATEX_HEADER: \usepackage{unicode-math}
#+LATEX_HEADER: \setmainfont{XITS}
#+LATEX_HEADER: \setmathfont{XITS Math}
#+LATEX_HEADER: \setmathfont[range={\mathcal,\mathbfcal},StylisticSet=1]{XITS Math}

* Задачи, которые требовалось решить в 2017 году
** Отработка методов выделения суммарной ДНК из разных источников (вода, донные отложения) для секвенирования библиотек ампликонов фрагментов маркерных генов 16S (прокариоты) и 18S (эукариоты) рРНК и фрагментных метагеномных библиотек с целью получения информации о таксономической структуре эукариотических организмов в сообществах, соответствующей данным микроскопических методов анализа.
** Отбор проб из фотического слоя и донных осадков (до 100), выделение ДНК, секвенирование библиотек ампликонов 16S и 18S рРНК (общий объем секвенирования – 1-2 запуска Illumina MiSeq или аналогичный), таксономический анализ сообществ.
** Подготовка материалов для регистрации выделенных в культуру бактерий во Всероссийскую коллекцию микроорганизмов (ВКМ) (г. Пущино) и немецкую коллекцию микроорганизмов и клеточных культур, г. Лейбниц, Германия (DSMZ).
** Отработка алгоритмов биоинформатического анализа результатов секвенирования фрагментных метагеномных библиотек.
** Разработка онтологии и технологии унифицированного доступа к данным результатов исследований на основе Linked-Data и современных стандартов представления данных о биомах. Интеграция хранилища данных проекта в мировую информационную среду.

Целью разработки данного направления является интеграция результатов исследования в проекте с данными других исследований.  Такая интеграция позволяет частично автоматизировать обработку информации, содержащейся в материала, первоначально предназначенных для ознакомления человеку.

Исследования велись по следующим направлениям:

1. Поиск онтологий для представления публикуемых документов.
2. Разработка системы хранения и обеспечения публикуемых документов в частично формализованном виде.
3. Создание средств обеспечения доступа к документам, включая поиск по содержимому.
4. Разработка программной системы для построения логического вывода на данных документов.
5. Создание инфраструктуры для проведения анализа текстов хранимых документов с целью выявления новых данных разметки.

** Концепция представления и публикации данных и результатов исследований

<<Согласовать с отчетом Федора >>

В основе концепции публикации данных является поддержка технологий [открытых] связанных данных (Linked Open Data).  Технологии позволяют осуществлять интеграцию данных на уровне глобальных идентификаторов ресурсов (URI, Universal Resource Identifiers) и общих стандартных концептуальных моделей (онтологий), используемых для представления данных (атрибутов и связей) публикуемых ресурсов.

Как правило в процессе публикации ресурсов решаются следующие технические проблемы:

1. Представление структуры публикуемых объектов при помощи стандартных форматов, позволяющих алгоритмически обрабатывать публикуемую информацию.
2. Реализация серверов непосредственно предоставляющих требуемую информацию по запросу: по идентификатору или характеристике содержимого, например, по ключевым словам, тегам или части текста.
3. Создание средств обнаружения публикуемой информации: регистрация собственных ресурсов в известных катарактах.

Во время первого года исследований по проекту удалось [в некоторой степени] решить первые две задачи: изучен ряд стандартных онтологий, используемых для публикации данных разного рода, а также разработано программное обеспечение для непосредственного предоставления ресурсов по запросу (цифровой архив).  Цифровой архив снабжен средствами логического вывода для поддержки решения задач связанных с предварительной обработкой запрашиваемой информации на основе знаний.

** Онтологии для публикации документов и результатов NGS

Основным публикуемым документом в проекте является научная статья.  Статья включает содержательную информацию представляемую в виде текста, таблиц, графиков и рисунков.  Также необходимо проводить разметку текста, представляющего закономерности, логические и ассоциативные связи между объектами и явлениями.

Приведем перечень основных онтологий, использованных для описания материалов публикаций.
1. [[http://www.openannotation.org/][=Open Annotation=]] (=oa=). Основная задача данной онтологии - представлять содержимое (аннотацию), описывающее другое содержимое. Закладка браузера является примером такого содержимого.
2. [[http://xmlns.com/foaf/spec/][=Friend-of-a-friend=]] (=foaf=) позволяет представлять информацию об агентах: физических и юридических лицах, а также программных агентов.
3. [[https://www.w3.org/TR/prov-o/][=Provenance=]] (=prov=). Онтология =prov= – основа описания информационных потоков в документах и их взаимосвязи. В цифровом архиве prov используется для ассоциации документа с цифровым архивом и организацией владельцем.
4. [[http://dublincore.org/documents/dcmi-terms/][=Dublin Core=]] (=dc=) представляет в аннотации ментаинформацию о творческом произведении: авторов, формат содержимого, его описание и др.
5. [[http://wiki.dbpedia.org/][=DBPedia=]] resource (=dbr=) – пространство имен объектов (ресурсов) Wikipedia. Онтология =dbr= используется для обозначения конкретных сущностей, географических названий и т.п.
6. [[http://bibliographic-ontology.org/specification][=Bibliographic ontology=]] (=bibo=)предназначена для разметки ссылок на внешние публикации, активно использует онтологию =dc=.
7. [[http://schema.org/][=Schema.org=]] (=schema=) представляет объекты, распознаваемые поисковыми агентами Google, Yandex, Yahoo и др.
Кроме перечисленных онтологий используются стандартные онтологии (=RDF=, =RDFs=, =RDFa=, =XSD=) и онтологии из проекта [[https://userbase.kde.org/Nepomuk][=NEPOMUK=]], предназначенные для описания объектов, хранимых в полнотекстовых индексных цифровых архивах.

Предметная область NGS отражена в следующих онтологиях:

1. [[https://github.com/micheldumontier/semanticscience][=Semanticscience Integrated Ontology=]] (=sio=) задает простую интегрированную модель для объектов, процессов и их атрибутов.  Онтология обеспечивает фундамент известных проектов по интеграции биологических данных [[http://bio2rdf.org][=Bio2RDF=]] и [[http://sadiframework.org][=SADI=]] ([[http://sadiframework.org/content/about-sadi/][Semantic Automated Discovery and Integration]]).
2. [[http://purl.org/biodiversity/taxon/][=TaxonMap Ontology=]] (=taxon=) - словарь для отображения таксономических классов в облако открытых связанных данных.
3. [[http://purl.org/NET/biol/ns][=Biological Taxonomy Vocabulary=]] (=biol=) - словарь для представления таксономии всех форм жизни.
4. [[http://www.biopax.org/][=BioPAX Level 3 ontology=]] (=biopax=) - онтология для представления процессов преобразования веществ и влияний (катализ, ингибирование и т.п.) веществ на биологические процессы.  Она позволяет ученым обмениваться информацией друг с другом.  Применение данной онтологии позволяет уменьшить сложность представления информации.
5. [[http://biotopontology.github.io/][=BioTop=]] (=biotop=) используется для представления функциональных сущностей в биологии и медицине, представляет собой онтологию верхнего уровня, совместимую с онтологиями BFO, DOLCE, и UMLS Semantic Network.
6. [[https://raw.githubusercontent.com/obi-ontology/obi/v2017-09-03/obi.owl][=Ontology for Biomedical Investigation=]] (=obi=) предназначена для разметки биомедицинские исследования, включая план исследования, протоколы и использованные приборы, а также позволяет представлять типы проводимых анализов и получаемые данные.  Онтология =obi= получена усовершенствованием онтологии "Functional Genomics Investigation Ontology" (=FuGO=).  Дальнейшее ее развитие направлено на включение концепций функциональной геномики и связанных с ней предметных областей.

** Средства поддержки обнаружения публикуемых ресурсов

Популярным подходом к решению проблемы обнаружения данных является регистрация сайтов/порталов в поисковых ресурсах, таких как Google или Yandex.  Данные информационные системы позволяют эффективно обнаруживать ресурсы Интернета (конкретные статические и динамические страницы) по ключевым словам и отрывкам текста.  Для серверов, где все публикуемые ресурсы (страницы) являются динамическими и генерируются во время запроса их URI, данные сервера не предоставляют эффективной процедуры обнаружения ресурсов по отрывкам содержимого, т.е. отображение свойств содержимого на URI ресурса.  Повышение эффективности обнаружения и предоставление информации об общей структуре ресурса используются специализированные средства, такие как Bio2RDF.

Проект Bio2RDF направлен разработку технологий обеспечения среды связанных данных в науках о жизни.  В основе разрабатываемых технологий находится семантический веб, программы и модули для обработки соответствующей информации. Bio2RDF определяет набор простых форматов данных и принципов их обработки создающих возможности [[https://docs.google.com/presentation/d/1SG6PFew2CPK1o_jRCYx30DFnuGEEr0uWVKPnz7Uqw5k/pub?start%3Dfalse&loop%3Dfalse&delayms%3D3000&slide%3Did.p][интегрирования данных из разных источников]], представленных в различных формата, в рамках технологий связанных данных.  Действующий сервер демонстрирует принципы Bio2RDF и семантические технологии.  Доступный исходный код позволяет свободно создавать собственные ресурсы.

Сервисы =Bio2RDF= активно используют вышеперечисленные онтологии для представления данных.  Например, =prov= используется для указания источника полученных данных.  Сервер хранит ссылки на ресурсы источника данных в виде отношений идентификаторов объектов в нотации ресурса и нотации Bio2RDF.  Кроме того, для всех объектов должен быть присвоен тип (класс).  Таким образом сервисы =Bio2RDF= позволяют организовывать несколько важнейших функций публикации данных - обнаружение данных в результате выполнения запросов на центральном сервере метаданных, обеспечение ссылок на ресурсы в виде стандартных URL, что в свою очередь позволяет загружать предоставленные данные и адаптировать их форматы к собственным алгоритмам.  Использование языка SPARQL на сервере метаданных позволяет включать ресурсы сервера в комплексные запросы, задействующие несколько серверов семантических данных.  Такой подход и обеспечивает желаемую интеграцию данных из разрозненных источников.

** Архитектура сервера ресурсов

Публикация ресурсов осуществляется при помощи отображения URI ресурса на его содержимое при помощи серверов, функционирующих по стандартному протоколу HTTP.  Реализация таких серверов обычно представляет собой цифровой архив размеченных документов.  В рамках проекта разработаны архитектура и подсистемы такого цифрового архива, поддерживающего технологии открытых связанных данных (рис. [[fig:architecture-LOD]]).

#+CAPTION: Цифровой архив ресурсов проекта с обеспечением поддержки открытых связанных данных
#+NAME: fig:architecture-LOD
[[./pics/architecture-ext.svg]]

Функциональные блоки сервера выполняют следующие задачи:



Модули интерпретации семантической разметки реализованы в клиентском JavaScript. Они запускаются, как только основное содержимое загружается в браузер. Модули сканируют структуру дерева документа, распознавая условия их активации. Если поиск оказался успешным, запускается тело модуля, которое в общем случае вносит изменения в документ. Формирование документа заканчивается, как только все условия были активированы и все команды были обработаны.


Исходные данные содержимого ресурсов хранятся в базе данных системы.  Система поддерживает множество таких баз данных.  База данных взаимодействует с загрузчиком данных, задача которого состоит в преобразовании URI ресурса в содержимое.  Для каждого источника необходимо разрабатывать специальные конвертеры, задача которых состоит в преобразовании публикуемой информации из базы данных в виде содержимого, размеченного в соответствии с принципами открытых связанных данных.  В качестве форматов представления содержимого ресурсов выступают размеченные RDFa HTML5-страницы или документы, а также графы онтологий, представленные в TTL-, RDF- и OWL2-форматах.

Модуль разграничения доступа позволяет предоставлять доступ к данным на основе некоторой политики, например, в соответствии с правами зарегистрированного пользователя.  Система позволяет загружать только те ресурсы, т.е. получать доступ к URI ресурсов, соответствующие полномочиям пользователя.  Сервис полнотекстового поиска позволяет ассоциировать тексты содержимого ресурсов с URI этих ресурсов.  Подсистема поиска реализована при помощи библиотеки Elasticsearch, которая обладает средствами нечеткого сравнения термов, что позволяет развивать систему в направлении реализации систем поиска релевантной информации.  Публикуемая информация помещается в шаблон выходного документа, соответствующий классу (типу) публикуемого ресурса, например, для публикации документов используется шаблон страницы, позволяющий проводить с документом некоторые преобразования.

Интеграция с сервисами обнаружения ресурсов имеет несколько уровней взаимодействия.  На самом простом уровне сервер обнаружения лишь предоставляет запрашивающей стороне только адреса URI зарегистрированных ресурсов.  Более тесная интеграция позволяет серверам выполнять совместные (федеративные) запросы
 SPARQL.  Для создания такой возможности в цифровой архив добавлены блоки поддержки SPARQL, включая базу данных и знаний (Сервер онтологий), который используется для хранения предварительно подготовленной логической структуры публикуемого ресурса.  Сервер онтологий реализован при помощи программной системы ClioPatria.  Данная система интересна тем, что полностью реализована на языках Prolog и С, она предоставляет несколько форматов компактного хранения данных, а также тесную интеграцию данных открытых связанных данных со средой программирования языка =Prolog=.

Машина логического вывода языка программирования =Prolog= используется для предварительной обработки публикуемой информации, а также для обеспечения доступа к знаниям системы извне.  Такой доступ обеспечивается при помощи модуля "API машины вывода".  Данный интерфейс (API) позволяет разрабатывать HTML5- JavaScript-приложения, отображающие тем или иным способом данные из цифрового архива.

** Анализ современного программного обеспечения обработки BD, используемого в приложениях NGS, в том числе, удалении адаптеров и химер, проверке качества данных, таксономической идентификации, картировании прочтений, сборки de novo, анализе ампликонов, реконструкции метаболических путей и аннотации последовательностей. Выбор оптимального ПО для обработки данных
** Подготовка технических предложений по проектированию и реализации ИОБД, предназначенной для архивирования, управления, курирования, анализа и визуализации данных, получаемых в результате исследования микробиома биоинформационными технологиями и NGS.
** Проектирование схемы Хранилища Больших Данных (ХБД) для обеспечения управления данными, используемыми при исследовании микробиома Байкала, а также веб-публикации для поиска нуклеотидных и аминокислотных последовательностей по заданным таксонам и параметрам среды обитания.
** Для построения полисистемы динамических моделей выделение сквозных концептов, имеющих качественный характер, и базовых взаимосвязей между ними. Проведение серии пробных идентификаций параметров.

Проведены следующие исследования:

1. Произведен обзор литературы по тематике моделирования микробиомов в естественной среде.
2. Разработан метод идентификации динамической модели микробиома оз.Байкал на основе данных мониторинга.
3. Предложена методика вычисления начальных условий модели.

Разработан ряд технологий продержки процесса моделирования:

1. Программная подсистема визуализации и редактирования структуры модели, представляющая модели в виде ориентированного графа взаимодействия компонентов.
2. Подсистема расчетов, визуализации и сравнения сценариев использования модели.

*** Визуализация и редактирование структуры модели

Модель представляется в виде ориентированных иерархических графов влияния элементов (веществ и видов бактерий и водорослей) друг на друга (генные сети) и графов динамики.  Граф строится двумя способами: а) вручную, что удобно на этапах тестирования исследования предметной области и проведения экспериментов с готовыми моделями; б) в результате интеллектуального анализа дынных полевых исследований.  Второй способ позволяет, в том числе, отображать результаты анализа полевых исследований в наглядном виде.

**** Графовое представление моделей микробиома оз. Байкал.

Структура графа модели генных сетей микробиомов проб, отобранных на оз. Байкал представляет собой иерархическую структуру.  На верхнем уровне находится источник радиации (Солнечная энергия) и растворенный в воде углекислый газ.  Радиация поглощается одноклеточными водорослями (второй уровень), в результате чего водоросли создают биомассу, которая поглощается бактериями, представителями третьего уровня.  Кроме того, все три уровня взаимодействуют со средой, характеризующейся также некоторыми биохимическими свойствами.  В процессе жизнедеятельности бактерии и водоросли вырабатывают активные вещества, влияющие на состояние среды.  Изменение параметров среды влияет на рост бактерий и водорослей.  Графовая структура модели микробиомов представлена на рис. [[fig:microbioma-graph]].

#+CAPTION: Иерархическая структура генной сети микробиомов оз. Байкал
#+NAME: fig:microbioma-graph
[[./pics/microbioma-models-graph.png]]

**** Программное обеспечение представления и обработки генных сетей и графов динамики

***** Архитектура системы

Система представления и обработки графов моделей состоит из следующих основных подсистем:
1. Хранилища графов;
2. Редактор графов;
3. Интеллектуальный анализ данных;
4. Визуализация структур данных и результатов модельных расчетов;
5. Импорт-экспорт данных и структуры графа в облачное хранилище.

Для реализации архитектуры использован ряд систем программирования:
1. Среда =Python= позволяет эффективно разрабатывать комплексные системы (склеивать компоненты) из различных гетерогенных подсистем;
2. Среда =R= для проведения первого этапа интеллектуального анализа данных, направленного на обобщение данных и поиск зависимостей между ними;
3. Среда =SWI Prolog= использована для формализации знаний второго из этапов интеллектуального анализа данных, а также реализации других подсистем, требующих использования логического вывода при помощи онтологий предметных областей;
4. Среда программная языка =C/С++/С#= использована для реализации вычислительных процедур;
5. Среда разработки интерфейсов пользователя =GTK+=, которая позволяет также интегрировать подсистемы приложения на уровне элементов управления пользовательского интерфейса.

***** Библиотеки Python для представления и обработки графов

Для Python реализовано несколько библиотек представления и обработки графов:
1. [[http://igraph.org/2014/02/04/igraph-0.7-python.html][=python-igraph 0.7.0=]], особенность которой заключается в возможности обработки больших по объему графов (порядка миллиона узлов); в библиотеке реализовано множество алгоритмов анализа графов, эффективная поддержки на низком уровне (использован язык =C=), а также поддержка стандартных форматов записи графов в файл.
2. [[https://networkx.github.io/][=NetworkX=]] - библиотека, подобная =igraph=, предназначенная для изучения структур динамических сетей в биологии, социуме и технике, предоставляет стандартный интерфейс для разработки приложений, среду для быстрой скооперированной разработки в мультидисциплинарных проектах, базируется на эффективных алгоритмах, реализованных ранее в языках компилируемого типа - =C=, =FORTRAN=, а также позволят обрабатывать большие объемы данных;
3. [[https://graph-tool.skewed.de/][=graph-tool=]] - одна из самых обширных библиотек для представления, визуализации и обработки графов, поддерживающая многоядерные вычислительные архитектуры, фильтрацию данных, стандартные форматы данных, оценку статистических параметров графов, топологические алгоритмы, а также, в некоторой степени, возможности логического вывода на статических данных.

***** Библиотеки для редактирования графов

К перечню библиотек, использованных в данном обзоре требовалось взаимодействие с библиотекой =GTK+=.
1. [[https://github.com/grindhold/libgtkflow][=libgtkflow=]] предназначена для построения и редактирования графов потоков, аналогичных =RapidMiner=; библиотека поддерживает механизм ретроспекции, что позволяет редактор, реализованный в языке =C=, встраивать в приложения =Python= и =Prolog=;
2. [[https://github.com/GNOME/graph-gtk][=graph-gtk=]] - библиотека, аналогичная предыдущей, но с более гибкой настройкой узлов графа, не поддерживает ретроспекцию.
